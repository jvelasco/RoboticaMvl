# ROBÓTICA MÓVIL
#
# Práctica 4.
# Alumnos:
# 		Miguel Martínez Rey
# 		Jose Francisco Velasco Cerpa
#

# Desc: Player sample configuration file for controlling Stage devices
# Author:  Richard Vaughan
# Date: 1 December 2004

# CVS: $Id: simple.cfg,v 1.35 2008-01-15 01:25:42 rtv Exp $


# load the Stage plugin simulation driver
driver
(		
  name "stage"
  provides [ "simulation:0" ]
  plugin "stageplugin"

  # load the named file into the simulator
  worldfile "practica4.world"	
)

driver
(
  name "stage"
  provides [ "graphics2d:0" ]
  model "cave"
)

driver
(
  name "mapfile"
  provides [ "map:0" ]
  filename "autolab.png"
  resolution 0.025 # La misma que en el .world
)

driver
(
  name "amcl"
  requires [ "odometry:::position2d:0" "laser:0" "laser:::map:0" ]
  provides [ "localize:0" "position2d:2" ]
  pf_max_samples 50000
  #init_pose [ 0 0 0 ]

  init_pose_var [ 10 8 6.28 ]
  
  # En la implementación del filtro de particulas realizada en Player, las
  # partículas siempre se distribuyen siguiendo una distribución gaussiana.  El
  # parámetro 'init_pose' determina la media de dicha distribución, su valor
  # por defecto es que las partículas estén centradas en el punto (0, 0).  El
  # parámetro 'init pose_var' fija la varianza de la distribución de
  # particulas. Por defecto obtenemos una varianza de 1 metro por un metro, y
  # 2pi en la orientación.  El tipo de distribución elegida hace que si el
  # robot se encuentra en las inmediaciones de este punto el robot estimará
  # rápidamente su posición, pero, por el contrario, si se encuentra en una
  # zona con una densidad baja de partículas la tasa de error en la estimación
  # y el tiempo de convergencia crecen.
  
  # Otro parámetro importante es 'pf_max_samples' que determina el número
  # máximo de partículas empleadas. A mayor número de partículas se obtiene
  # mejor resultado, sin embargo el tiempo de computo también crece.
)

driver
(
  name "vfh"
  requires ["position2d:0" "laser:0"]
  provides ["position2d:1"]
  cell_size 0.025
# window_diameter 61
# sector_angle 5
  safety_dist_0ms 0.1
  safety_dist_1ms 0.2
  max_speed 0.5
# max_speed_narrow_opening 0.2
# max_speed_wide_opening 0.2
# max_acceleration 0.2
# min_turnrate 10
# max_turnrate_0ms 40
# max_turnrate_1ms 40
# min_turn_radius_safety_factor 1.0
  free_space_cutoff_0ms 2000000.0
  free_space_cutoff_1ms 2000000.0
# obs_cutoff_0ms 2000000.0
# obs_cutoff_1ms 2000000.0
# weight_desired_dir 5.0
# weight_current_dir 3.0
  distance_epsilon 0.005
# angle_epsilon 10
# escape_speed 0.0
# escape_time 0.0
# escape_max_turnrate 0.0
 synchronous 0


)


# Create a Stage driver and attach position2d and laser interfaces 
# to the model "r0"
driver
( 
  name "stage"
  provides [ "position2d:0" "laser:0" "graphics2d:1" ]
			# "laser:0" "speech:0" "graphics2d:0" "graphics3d:0" ]
  model "r0" 
)

driver
(
  name "wavefront"
  provides [ "planner:0" ]
  requires [ "input:::position2d:2" "output:::position2d:1" "map:0"]
)
